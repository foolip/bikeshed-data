{
  "AnimationEvent()": {
    "AnimationEvent(type)": {
      "args": [
        "type"
      ], 
      "for": [
        "AnimationEvent"
      ], 
      "shortname": "css-animations"
    }, 
    "AnimationEvent(type, animationEventInitDict)": {
      "args": [
        "type", 
        "animationEventInitDict"
      ], 
      "for": [
        "AnimationEvent"
      ], 
      "shortname": "css-animations"
    }
  }, 
  "CSSAnimation()": {
    "CSSAnimation(target, animationName)": {
      "args": [
        "target", 
        "animationName"
      ], 
      "for": [
        "CSSAnimation"
      ], 
      "shortname": "css-animations"
    }, 
    "CSSAnimation(target, animationName, options)": {
      "args": [
        "target", 
        "animationName", 
        "options"
      ], 
      "for": [
        "CSSAnimation"
      ], 
      "shortname": "css-animations"
    }, 
    "CSSAnimation(target, animationName, options, defaultEasing)": {
      "args": [
        "target", 
        "animationName", 
        "options", 
        "defaultEasing"
      ], 
      "for": [
        "CSSAnimation"
      ], 
      "shortname": "css-animations"
    }, 
    "CSSAnimation(target, animationName, options, defaultEasing, timeline)": {
      "args": [
        "target", 
        "animationName", 
        "options", 
        "defaultEasing", 
        "timeline"
      ], 
      "for": [
        "CSSAnimation"
      ], 
      "shortname": "css-animations"
    }
  }, 
  "CSSKeyframeEffectReadOnly()": {
    "CSSKeyframeEffectReadOnly(keyframesName, defaultEasing)": {
      "args": [
        "keyframesName", 
        "defaultEasing"
      ], 
      "for": [
        "CSSKeyframeEffectReadOnly"
      ], 
      "shortname": "css-animations"
    }
  }, 
  "FederatedCredential()": {
    "FederatedCredential(data)": {
      "args": [
        "data"
      ], 
      "for": [
        "FederatedCredential"
      ], 
      "shortname": "credential-management"
    }
  }, 
  "FontFace()": {
    "FontFace()": {
      "args": [], 
      "for": [
        "FontFace"
      ], 
      "shortname": "css-font-loading"
    }, 
    "FontFace(family, source, descriptors)": {
      "args": [
        "family", 
        "source", 
        "descriptors"
      ], 
      "for": [
        "FontFace"
      ], 
      "shortname": "css-font-loading"
    }
  }, 
  "FontFaceSet()": {
    "FontFaceSet(initialFaces)": {
      "args": [
        "initialFaces"
      ], 
      "for": [
        "FontFaceSet"
      ], 
      "shortname": "css-font-loading"
    }
  }, 
  "FontFaceSetLoadEvent()": {
    "FontFaceSetLoadEvent(type)": {
      "args": [
        "type"
      ], 
      "for": [
        "FontFaceSetLoadEvent"
      ], 
      "shortname": "css-font-loading"
    }, 
    "FontFaceSetLoadEvent(type, eventInitDict)": {
      "args": [
        "type", 
        "eventInitDict"
      ], 
      "for": [
        "FontFaceSetLoadEvent"
      ], 
      "shortname": "css-font-loading"
    }
  }, 
  "PasswordCredential()": {
    "PasswordCredential(data)": {
      "args": [
        "data"
      ], 
      "for": [
        "PasswordCredential"
      ], 
      "shortname": "credential-management"
    }, 
    "PasswordCredential(form)": {
      "args": [
        "form"
      ], 
      "for": [
        "PasswordCredential"
      ], 
      "shortname": "credential-management"
    }
  }, 
  "SecurityPolicyViolationEvent()": {
    "SecurityPolicyViolationEvent(type)": {
      "args": [
        "type"
      ], 
      "for": [
        "SecurityPolicyViolationEvent"
      ], 
      "shortname": "csp"
    }, 
    "SecurityPolicyViolationEvent(type, eventInitDict)": {
      "args": [
        "type", 
        "eventInitDict"
      ], 
      "for": [
        "SecurityPolicyViolationEvent"
      ], 
      "shortname": "csp"
    }
  }, 
  "StatefulAnimator()": {
    "StatefulAnimator()": {
      "args": [], 
      "for": [
        "StatefulAnimator"
      ], 
      "shortname": "css-animationworklet"
    }, 
    "StatefulAnimator(options)": {
      "args": [
        "options"
      ], 
      "for": [
        "StatefulAnimator"
      ], 
      "shortname": "css-animationworklet"
    }, 
    "StatefulAnimator(options, state)": {
      "args": [
        "options", 
        "state"
      ], 
      "for": [
        "StatefulAnimator"
      ], 
      "shortname": "css-animationworklet"
    }
  }, 
  "StatelessAnimator()": {
    "StatelessAnimator()": {
      "args": [], 
      "for": [
        "StatelessAnimator"
      ], 
      "shortname": "css-animationworklet"
    }, 
    "StatelessAnimator(options)": {
      "args": [
        "options"
      ], 
      "for": [
        "StatelessAnimator"
      ], 
      "shortname": "css-animationworklet"
    }
  }, 
  "WorkletAnimation()": {
    "WorkletAnimation(animatorName, effects, timeline, options)": {
      "args": [
        "animatorName", 
        "effects", 
        "timeline", 
        "options"
      ], 
      "for": [
        "WorkletAnimation"
      ], 
      "shortname": "css-animationworklet"
    }
  }, 
  "[[CollectFromCredentialStore]]()": {
    "[[CollectFromCredentialStore]](origin, options, sameOriginWithAncestors)": {
      "args": [
        "origin", 
        "options", 
        "sameOriginWithAncestors"
      ], 
      "for": [
        "Credential", 
        "FederatedCredential", 
        "PasswordCredential"
      ], 
      "shortname": "credential-management"
    }
  }, 
  "[[Create]]()": {
    "[[Create]](origin, options, sameOriginWithAncestors)": {
      "args": [
        "origin", 
        "options", 
        "sameOriginWithAncestors"
      ], 
      "for": [
        "Credential", 
        "FederatedCredential", 
        "PasswordCredential"
      ], 
      "shortname": "credential-management"
    }
  }, 
  "[[DiscoverFromExternalSource]]()": {
    "[[DiscoverFromExternalSource]](origin, options, sameOriginWithAncestors)": {
      "args": [
        "origin", 
        "options", 
        "sameOriginWithAncestors"
      ], 
      "for": [
        "Credential"
      ], 
      "shortname": "credential-management"
    }
  }, 
  "[[Store]]()": {
    "[[Store]](credential, sameOriginWithAncestors)": {
      "args": [
        "credential", 
        "sameOriginWithAncestors"
      ], 
      "for": [
        "Credential", 
        "FederatedCredential", 
        "PasswordCredential"
      ], 
      "shortname": "credential-management"
    }
  }, 
  "add()": {
    "add(font)": {
      "args": [
        "font"
      ], 
      "for": [
        "FontFaceSet"
      ], 
      "shortname": "css-font-loading"
    }
  }, 
  "appendRule()": {
    "appendRule(rule)": {
      "args": [
        "rule"
      ], 
      "for": [
        "CSSKeyframesRule"
      ], 
      "shortname": "css-animations"
    }
  }, 
  "assert()": {
    "assert(condition, ...data)": {
      "args": [
        "condition", 
        "...data"
      ], 
      "for": [
        "console"
      ], 
      "shortname": "console"
    }
  }, 
  "check()": {
    "check()": {
      "args": [], 
      "for": [
        "FontFaceSet"
      ], 
      "shortname": "css-font-loading"
    }, 
    "check(font)": {
      "args": [
        "font"
      ], 
      "for": [
        "FontFaceSet"
      ], 
      "shortname": "css-font-loading"
    }, 
    "check(font, text)": {
      "args": [
        "font", 
        "text"
      ], 
      "for": [
        "FontFaceSet"
      ], 
      "shortname": "css-font-loading"
    }
  }, 
  "clear()": {
    "clear()": {
      "args": [], 
      "for": [
        "FontFaceSet", 
        "console"
      ], 
      "shortname": "console"
    }
  }, 
  "count()": {
    "count()": {
      "args": [], 
      "for": [
        "console"
      ], 
      "shortname": "console"
    }, 
    "count(label)": {
      "args": [
        "label"
      ], 
      "for": [
        "console"
      ], 
      "shortname": "console"
    }
  }, 
  "countReset()": {
    "countReset()": {
      "args": [], 
      "for": [
        "console"
      ], 
      "shortname": "console"
    }, 
    "countReset(label)": {
      "args": [
        "label"
      ], 
      "for": [
        "console"
      ], 
      "shortname": "console"
    }
  }, 
  "create()": {
    "create()": {
      "args": [], 
      "for": [
        "CredentialsContainer"
      ], 
      "shortname": "credential-management"
    }, 
    "create(options)": {
      "args": [
        "options"
      ], 
      "for": [
        "CredentialsContainer"
      ], 
      "shortname": "credential-management"
    }
  }, 
  "debug()": {
    "debug(...data)": {
      "args": [
        "...data"
      ], 
      "for": [
        "console"
      ], 
      "shortname": "console"
    }
  }, 
  "delete()": {
    "delete(font)": {
      "args": [
        "font"
      ], 
      "for": [
        "FontFaceSet"
      ], 
      "shortname": "css-font-loading"
    }
  }, 
  "deleteRule()": {
    "deleteRule(index)": {
      "args": [
        "index"
      ], 
      "for": [
        "CSSGroupingRule"
      ], 
      "shortname": "css-conditional"
    }, 
    "deleteRule(select)": {
      "args": [
        "select"
      ], 
      "for": [
        "CSSKeyframesRule"
      ], 
      "shortname": "css-animations"
    }
  }, 
  "dir()": {
    "dir(item)": {
      "args": [
        "item"
      ], 
      "for": [
        "console"
      ], 
      "shortname": "console"
    }, 
    "dir(item, options)": {
      "args": [
        "item", 
        "options"
      ], 
      "for": [
        "console"
      ], 
      "shortname": "console"
    }
  }, 
  "dirxml()": {
    "dirxml(...data)": {
      "args": [
        "...data"
      ], 
      "for": [
        "console"
      ], 
      "shortname": "console"
    }
  }, 
  "error()": {
    "error(...data)": {
      "args": [
        "...data"
      ], 
      "for": [
        "console"
      ], 
      "shortname": "console"
    }
  }, 
  "findRule()": {
    "findRule(select)": {
      "args": [
        "select"
      ], 
      "for": [
        "CSSKeyframesRule"
      ], 
      "shortname": "css-animations"
    }
  }, 
  "get()": {
    "get()": {
      "args": [], 
      "for": [
        "CredentialsContainer"
      ], 
      "shortname": "credential-management"
    }, 
    "get(options)": {
      "args": [
        "options"
      ], 
      "for": [
        "CredentialsContainer"
      ], 
      "shortname": "credential-management"
    }
  }, 
  "getChildren()": {
    "getChildren()": {
      "args": [], 
      "for": [
        "WorkletGroupEffect"
      ], 
      "shortname": "css-animationworklet"
    }
  }, 
  "getFragmentInformation()": {
    "getFragmentInformation(filter)": {
      "args": [
        "filter"
      ], 
      "for": [
        "Element"
      ], 
      "shortname": "box-tree-api"
    }
  }, 
  "group()": {
    "group(...data)": {
      "args": [
        "...data"
      ], 
      "for": [
        "console"
      ], 
      "shortname": "console"
    }
  }, 
  "groupCollapsed()": {
    "groupCollapsed(...data)": {
      "args": [
        "...data"
      ], 
      "for": [
        "console"
      ], 
      "shortname": "console"
    }
  }, 
  "groupEnd()": {
    "groupEnd()": {
      "args": [], 
      "for": [
        "console"
      ], 
      "shortname": "console"
    }
  }, 
  "info()": {
    "info(...data)": {
      "args": [
        "...data"
      ], 
      "for": [
        "console"
      ], 
      "shortname": "console"
    }
  }, 
  "insertRule()": {
    "insertRule(rule, index)": {
      "args": [
        "rule", 
        "index"
      ], 
      "for": [
        "CSSGroupingRule"
      ], 
      "shortname": "css-conditional"
    }
  }, 
  "layoutNow()": {
    "layoutNow()": {
      "args": [], 
      "for": [
        "Document"
      ], 
      "shortname": "box-tree-api"
    }
  }, 
  "load()": {
    "load()": {
      "args": [], 
      "for": [
        "FontFace", 
        "FontFaceSet"
      ], 
      "shortname": "css-font-loading"
    }, 
    "load(font, text)": {
      "args": [
        "font", 
        "text"
      ], 
      "for": [
        "FontFaceSet"
      ], 
      "shortname": "css-font-loading"
    }
  }, 
  "log()": {
    "log(...data)": {
      "args": [
        "...data"
      ], 
      "for": [
        "console"
      ], 
      "shortname": "console"
    }
  }, 
  "preventSilentAccess()": {
    "preventSilentAccess()": {
      "args": [], 
      "for": [
        "CredentialsContainer"
      ], 
      "shortname": "credential-management"
    }
  }, 
  "ready()": {
    "ready()": {
      "args": [], 
      "for": [
        "FontFaceSet"
      ], 
      "shortname": "css-font-loading"
    }
  }, 
  "registerAnimator()": {
    "registerAnimator(name, animatorCtor)": {
      "args": [
        "name", 
        "animatorCtor"
      ], 
      "for": [
        "AnimationWorkletGlobalScope"
      ], 
      "shortname": "css-animationworklet"
    }
  }, 
  "set()": {
    "set(featureValueName, values)": {
      "args": [
        "featureValueName", 
        "values"
      ], 
      "for": [
        "CSSFontFeatureValuesMap"
      ], 
      "shortname": "css-fonts"
    }
  }, 
  "store()": {
    "store()": {
      "args": [], 
      "for": [
        "CredentialsContainer"
      ], 
      "shortname": "credential-management"
    }, 
    "store(credential)": {
      "args": [
        "credential"
      ], 
      "for": [
        "CredentialsContainer"
      ], 
      "shortname": "credential-management"
    }
  }, 
  "supports()": {
    "supports(conditionText)": {
      "args": [
        "conditionText"
      ], 
      "for": [
        "CSS"
      ], 
      "shortname": "css-conditional"
    }, 
    "supports(property, value)": {
      "args": [
        "property", 
        "value"
      ], 
      "for": [
        "CSS"
      ], 
      "shortname": "css-conditional"
    }
  }, 
  "table()": {
    "table(tabularData)": {
      "args": [
        "tabularData"
      ], 
      "for": [
        "console"
      ], 
      "shortname": "console"
    }, 
    "table(tabularData, properties)": {
      "args": [
        "tabularData", 
        "properties"
      ], 
      "for": [
        "console"
      ], 
      "shortname": "console"
    }
  }, 
  "time()": {
    "time()": {
      "args": [], 
      "for": [
        "console"
      ], 
      "shortname": "console"
    }, 
    "time(label)": {
      "args": [
        "label"
      ], 
      "for": [
        "console"
      ], 
      "shortname": "console"
    }
  }, 
  "timeEnd()": {
    "timeEnd()": {
      "args": [], 
      "for": [
        "console"
      ], 
      "shortname": "console"
    }, 
    "timeEnd(label)": {
      "args": [
        "label"
      ], 
      "for": [
        "console"
      ], 
      "shortname": "console"
    }
  }, 
  "timeLog()": {
    "timeLog(label, ...data)": {
      "args": [
        "label", 
        "...data"
      ], 
      "for": [
        "console"
      ], 
      "shortname": "console"
    }
  }, 
  "trace()": {
    "trace(...data)": {
      "args": [
        "...data"
      ], 
      "for": [
        "console"
      ], 
      "shortname": "console"
    }
  }, 
  "warn()": {
    "warn(...data)": {
      "args": [
        "...data"
      ], 
      "for": [
        "console"
      ], 
      "shortname": "console"
    }
  }
}